syntax = "proto3";

import "type.proto";
import "function.proto";

message Module {
  /* The unique identifier of this module */
  ModuleReference id = 1;

  /* A list of modules this module depends on,
     that will be loaded by the UNI runtime before executing this program.


     These modules can then be referenced by their moduleID inside of
     functions and types of this module.

     If a Dependency can't be loaded, this module can't be loaded too
  */
  repeated ModuleReference dependencies = 2;

  repeated Function functions = 3;
  repeated ComplexType types = 4;

  

  /* A native binding is a collection of implementations inside the UNI engine. 
     The engine will then replace certain functions defined in the module with engine specific implementations.
     The engine cannot load a module if it does not provide a specific native binding.
  */
  repeated string nativeBindings = 5;
}

message ModuleReference {
  /*
    The domain is an unique identifier for a module across the UNI ecosystem
    By example:
    "uni" -> the global module containing all basic language features
    "uni" "crypto" -> The crypto module
    "local" "test" -> Your test module

    Domains may only contain lowercase alphabetic letters,
    the first domain must be "uni" or "local"
  */
  repeated string domain = 1;

  /* The moduleID is unique to the Module,
      inside of its parent module.
      The parent references itself as 0, function/types of this module,
      are referenced with a moduleID of 0.
      References to other modules inside of this module use the moduleID
      defined in Module.dependencies, not the one in the loaded module's id (which is 0).
   */
  int32 moduleID = 2;

  /* The version should be increased on every breaking change to notify users */
  int32 version = 3;
}
