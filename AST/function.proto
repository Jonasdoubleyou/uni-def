syntax = "proto3";

import "type.proto";

/* A way to refer to functions, "function" has to be unique inside the modules functions */
message FunctionReference {
  int32 moduleID = 1;
  int32 function = 2;
}

/* A variable reference resolves to a Variable (holding a value) inside a function (that has to be in the callstack) inside a module */
message VariableReference {
  int32 id = 1;
  int32 functionID = 2;
  int32 moduleID = 3;
}

/* A variable represents a storage in memory.
    It has a type, which defines what can be inside of it.
    It holds a value at runtime.
*/
message Variable {
  /* The id has to be unique inside of the function,
     that includes parameters.
  */

  /*unique*/ int32 id = 1;
  /*interpreter-optional*/ string name = 2;
   /*optional*/string description = 3;

  TypeReference type = 4;
}

/*
  An expression that evaluates to whatever is stored at "get".
*/
message Get {
  VariableReference get = 1;
}

/* Overrides the memory location "set" is pointing to by whatever "value" evaluates to, evaluates to that "value" */
message Set {
  VariableReference set = 1;
  Expression value = 2;

  /* Wether this is the first time the variable gets Set, can't call Get before on it */
  bool initialization = 3;

  /* Wether Set can be called on this reference later on.*/
  bool constant = 4;
}

// The interpreter shall ignore these, and they can safely replaced by their "expression" property, effectively removing the Comment. If the expression is empty, the Comment can be removed
// A Comment that is directly inside the functions body, shall not contain a postExpression. The preExpression is shown in the line before the expression.
// If a comment is not directly inside a functions body, the IDE may show preExpression and postExpression the way the user wants it
// IDEs may render Comments as Markdown or plain text depending on user preference.  
message Comment {
  // The actual content of the comment
  string preExpression = 0;
  /*optional*/ Expression expression = 1;
  /*optional*/ string postExpression = 2;
}

// "Raw" represents plain text code, that was not parsed yet.
// It is meant to represent code *while typing* - to support storing temporary changes and copy & paste. It is not meant to support dynamically parsed code.
// The interpreter must not accept Modules that contain Raws. Raw is supposed to be parsed from the IDE.
// The UNI hosts may restrict the usage of "Raw" to allow collaboration, they may not serve modules containing Raw Expressions to UNI interpreters.
// 
message Raw {
  string content = 0;
}
/* An Expression evaluates to a value at runtime. Anything inside of a function is an expression.
*/
message Expression {
 TypeReference type = 1;
 oneof expressionType {
   Get get = 2;
   Set set = 3;
   Call call = 4;
   Access access = 5;
   FunctionReference fun = 6;
   Literal literal = 7;

   Return return = 8;
   Comment comment = 9;
   Raw raw = 10;
 }
}



message Call {
  Expression function = 1;
  /* The arguments */
  repeated Argument arguments = 2;
}

message Argument {
  /* matches a variable (parameter) of the called function */
  int32 id = 0;
  /* The parameter will be initialized to whatever value evaluates to */
  Expression value = 1; // The type of the value has to match the Parameter's type
}

message GenericArgument {
  int32 id = 0;
  TypeReference value = 1;
}

/* evaluates to a VariableReference by accessing a ComplexType property */
// optional
message Access {
  Expression object = 1;
  int32 property = 2;
}

/*Values in the code*/
message Literal {
  oneof type {
    int32 integer = 1;
    float floating = 2;
    bool bool = 3;
    string str = 4;
    bool void = 5;
  }
}

/* Stops executing the function and returns its value */
message Return {
  int32 up = 0; // The Call to return to. Goes up the Function.lexicalParent chain 
  Expression value = 1;
}

message Function {
  /* The id of this function, must be unique inside the modules functions. "main" functions got the id 0 */
  int32 id = 0;
  /* The type this function has, defining the parameters and the return type. Must be a Function type */
  ComplexTypeReference type = 1;

  /* The name of the function. The UNI interpreter only uses the id and does not use
     the reference, therefore it can be removed at building time to shrink module size */
  /*interpreter-optional*/ string name = 2;
  /*interpreter-optional*/ string description = 3;

  /* If a function has a lexicalParent, the function reference can only be resolved in the parent.
     When it gets resolved, a reference to the parents function context gets stored.
     Thus, a function can access all variables in it's parent, and in it's parent's parent and so on
     
     This is called "inner function" in other languages, "closures" are a related concept (but asynchrony does not yet exist in UNI)

     If a function has no lexicalParent, it can be referenced everywhere
  */
  /*optional*/ FunctionReference lexicalParent = 4;

  /* A Function is considered pure, if only functions are called inside of it, that are itself pure, and that only accesses variables of pure functions.
     Functions, whose functionality is implemented by the UNI engine, are pure if the function when called with the saem arguments, always returns the same value.
     A UNI engine might decide to replace a function call to a pure function with the result of a previous call. 
     Replacing the call with the resulting value at a compilation step is not considered a change of the UNI sourcecode.
   */
  bool pure = 5;


   /* The variables can only be accessed inside this function and its children */
   repeated Variable parameters = 6;
   repeated Variable variables = 7;
  
   /* The "code" executed when calling this function*/
   repeated Expression body = 8;
}
