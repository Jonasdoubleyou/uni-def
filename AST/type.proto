syntax = "proto3";

import "module.proto";
import "function.proto";


/* Used to refer at a type */
message TypeReference {
  oneof primitiveOrComplex {
    PrimitiveType primitive = 1;
    // ComplexTypeReference complex = 2;
  }
}

/* Used to refer to a Type, "type" has to be unique inside the module "moduleID" point32s to */
//message ComplexTypeReference {
//  int32 type = 1;
//  int32 moduleID = 2;
//}

/* Describes a Type defined in the module */
message Type {
  int32 id = 1;
  // oneof typeType {
    // ComplexType complex = 2;
    // FunctionType function = 3;
  // }
}

/* A Type that composes other Types, known as its properties.
   Example: "User" is a ComplexType that has the property "name" which is of type PrimitiveType.String
*/
// OPTIONAL
//message ComplexType {
//  /*unique*/ int32 id = 0;
//  /*parser-*/optional string name = 1;
//
//  repeated Property properties = 2;
//}

// message Property {
//  /* unique inside of the type */
//  int32 id = 0;
//  TypeReference type = 1;
//  /*parser-*/optional string name = 2;
// }

/* A Type that represents the most low-level types that can't be split up */
enum PrimitiveType {
  String = 0; /* A bunch of UTF-16 characters, characters of a String are itself Strings */
  Integer = 1; /* A number that is a multiple of 1 ranging from 2 power 32 to 1 - 2 power 32 */
  Float = 2; /* A 64bit FLoating point number defined according to "Some cool spec" */
  Boolean = 3; /* True / False */
  Void = 4; /* Nothing, really nothing */
}

/*A Type that represents a Function.
  A FunctionReference fullfills this type if returns & arguments are equal
*/
// OPTIONAL
// message FunctionType {
//  repeated FunctionTypeArgument arguments = 0;
//  TypeReference returns = 1;
// }

// message FunctionTypeArgument {
//   int id = 0;
//   TypeReference type = 1;
// }
