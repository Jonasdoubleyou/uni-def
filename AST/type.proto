syntax = "proto3";

/* Used to refer to a Type declared inside a Module, "type" has to be unique inside the module "moduleID" point32s to */
message ComplexTypeReference {
  int32 type = 1;
  int32 moduleID = 2;
}

/* A Type that composes other Types, known as its properties.
   Example: "User" is an ObjectType that has the property "name" which is of type PrimitiveType.String
*/

/* Used to refer at a type */
message TypeReference {
  oneof primitiveOrComplex {
    ComplexTypeReference complex = 2;
    GenericTypeReference generic = 3;
  }
}

message GenericTypeReference {
  FunctionReference function = 1; // must be in the function this is referencing, or in it's lexicalParent chain
  int32 generic = 2; // the id of the generic function parameter in that function
}

message Property {
  /* unique inside of the type */
  int32 id = 0;
  TypeReference type = 1;
 /*interpreter-*/optional string name = 2;
 /*interpreter-*/optional string description = 3;
}

message ObjectType {
  /*interpreter-*/optional string name = 1;
  /*interpreter-*/optional string description = 2;

  repeated Property properties = 3;

  repeated ComplexTypeReference supertypes = 4;
}

/*A Type that represents a Function.
  A FunctionReference fullfills this type if returns & parameters are either equal or a subtype of the generic parameter

  If a function type is marked virtual, it is called a 'virtual function'
  Another function type can then reference that virtual function as its virtual parent.
  The child must have the same parameters as the virtualParent,
    however the types may be subtypes.
*/
message FunctionType {
  repeated FunctionTypeParameter parameters = 1;
  repeated FunctionGenericParameter typeParameters = 2;
  TypeReference returns = 3;

  bool virtual = 4;
  /*optional*/ TypeReference virtualParent = 5;
}

message FunctionTypeParameter {
   int32 id = 0; // the position inside the arguments, array, zero-based, unique 
   TypeReference type = 1;
   // Hint for implementations:
   /*optional*/ string name = 2;
   /*optional*/string description = 3;
}

message FunctionGenericParameter {
  int32 id = 0;
  TypeReference typeBoundary = 1; // All specific types must be a subtype of this
     // Hint for implementations:
   /*optional*/ string name = 2;
   /*optional*/string description = 3;
}

message UnionType {
  repeated TypeReference members = 1;
  /*interpreter-*/optional string name = 2;
  /*interpreter-*/optional string description = 3; 
}



/* Describes a Type defined in the module */
message ComplexType {
  int32 id = 1;
  oneof typeType {
    ObjectType object = 2;
    FunctionType function = 3;
    UnionType union = 4;
  }
}



